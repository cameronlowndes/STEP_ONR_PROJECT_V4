{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\herib\\\\Desktop\\\\coding folder\\\\IT online learning\\\\novamart_orcal_database\\\\fronend\\\\src\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/components/AuthContext.js\nimport React, { createContext, useContext, useState } from 'react';\n\n// Create AuthContext\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Create a provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null); // Manage the current user state\n\n  // Function to log in the user\n  const login = user => {\n    setCurrentUser(user);\n  };\n\n  // Function to log out the user\n  const logout = () => {\n    setCurrentUser(null);\n  };\n\n  // Determine if the current user is an admin\n  const isAdmin = currentUser && currentUser.role === 'admin'; // Modify this as per your logic\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      currentUser,\n      login,\n      logout,\n      isAdmin\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the AuthContext\n_s(AuthProvider, \"D3+eUn/eYbOcEwoCOjOk5Grmif4=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","currentUser","setCurrentUser","login","user","logout","isAdmin","role","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/herib/Desktop/coding folder/IT online learning/novamart_orcal_database/fronend/src/AuthContext.js"],"sourcesContent":["// src/components/AuthContext.js\r\nimport React, { createContext, useContext, useState } from 'react';\r\n\r\n// Create AuthContext\r\nconst AuthContext = createContext();\r\n\r\n// Create a provider component\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null); // Manage the current user state\r\n\r\n  // Function to log in the user\r\n  const login = (user) => {\r\n    setCurrentUser(user);\r\n    \r\n  };\r\n\r\n  // Function to log out the user\r\n  const logout = () => {\r\n    setCurrentUser(null);\r\n  };\r\n\r\n  // Determine if the current user is an admin\r\n  const isAdmin = currentUser && currentUser.role === 'admin'; // Modify this as per your logic\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ currentUser, login, logout, isAdmin }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use the AuthContext\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;;AAElE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGL,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,MAAMM,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAEtD;EACA,MAAMS,KAAK,GAAIC,IAAI,IAAK;IACtBF,cAAc,CAACE,IAAI,CAAC;EAEtB,CAAC;;EAED;EACA,MAAMC,MAAM,GAAGA,CAAA,KAAM;IACnBH,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC;;EAED;EACA,MAAMI,OAAO,GAAGL,WAAW,IAAIA,WAAW,CAACM,IAAI,KAAK,OAAO,CAAC,CAAC;;EAE7D,oBACEX,OAAA,CAACC,WAAW,CAACW,QAAQ;IAACC,KAAK,EAAE;MAAER,WAAW;MAAEE,KAAK;MAAEE,MAAM;MAAEC;IAAQ,CAAE;IAAAP,QAAA,EAClEA;EAAQ;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAAb,EAAA,CAxBaF,YAAY;AAAAgB,EAAA,GAAZhB,YAAY;AAyBzB,OAAO,MAAMiB,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,OAAOvB,UAAU,CAACI,WAAW,CAAC;AAChC,CAAC;AAACmB,GAAA,CAFWD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}