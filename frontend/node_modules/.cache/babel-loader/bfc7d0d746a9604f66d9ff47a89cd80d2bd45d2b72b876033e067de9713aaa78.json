{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\herib\\\\Desktop\\\\coding folder\\\\IT online learning\\\\novamart_orcal_database\\\\fronend\\\\src\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useMemo, useEffect } from 'react';\n\n// Create AuthContext\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Create a provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  // Initialize the currentUser state with data from localStorage (if available)\n  const [currentUser, setCurrentUser] = useState(() => {\n    const user = JSON.parse(localStorage.getItem('currentUser'));\n    return user || null; // Return user if exists, otherwise null\n  });\n\n  // Function to log in the user\n  const login = user => {\n    localStorage.setItem('currentUser', JSON.stringify(user)); // Save user data to localStorage\n    setCurrentUser(user); // Update currentUser state\n  };\n\n  // Function to log out the user\n  const logout = () => {\n    localStorage.removeItem('currentUser'); // Remove user data from localStorage\n    setCurrentUser(null); // Reset currentUser state\n  };\n\n  // Determine if the current user is an admin\n  const isAdmin = currentUser && currentUser.role === 'admin';\n\n  // Memoize the context value to avoid unnecessary re-renders\n  const contextValue = useMemo(() => ({\n    currentUser,\n    login,\n    logout,\n    isAdmin\n  }), [currentUser]); // Recalculate only when currentUser changes\n\n  useEffect(() => {\n    // Clean up localStorage if currentUser is null (optional)\n    if (!currentUser) {\n      localStorage.removeItem('currentUser');\n    }\n  }, [currentUser]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the AuthContext\n_s(AuthProvider, \"+wcgS+pgUR0njzkyP3uDZj+enrY=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useMemo","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","currentUser","setCurrentUser","user","JSON","parse","localStorage","getItem","login","setItem","stringify","logout","removeItem","isAdmin","role","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/herib/Desktop/coding folder/IT online learning/novamart_orcal_database/fronend/src/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useMemo, useEffect } from 'react';\r\n\r\n// Create AuthContext\r\nconst AuthContext = createContext();\r\n\r\n// Create a provider component\r\nexport const AuthProvider = ({ children }) => {\r\n  // Initialize the currentUser state with data from localStorage (if available)\r\n  const [currentUser, setCurrentUser] = useState(() => {\r\n    const user = JSON.parse(localStorage.getItem('currentUser'));\r\n    return user || null; // Return user if exists, otherwise null\r\n  });\r\n\r\n  // Function to log in the user\r\n  const login = (user) => {\r\n    localStorage.setItem('currentUser', JSON.stringify(user)); // Save user data to localStorage\r\n    setCurrentUser(user); // Update currentUser state\r\n  };\r\n\r\n  // Function to log out the user\r\n  const logout = () => {\r\n    localStorage.removeItem('currentUser'); // Remove user data from localStorage\r\n    setCurrentUser(null); // Reset currentUser state\r\n  };\r\n\r\n  // Determine if the current user is an admin\r\n  const isAdmin = currentUser && currentUser.role === 'admin';\r\n\r\n  // Memoize the context value to avoid unnecessary re-renders\r\n  const contextValue = useMemo(() => ({\r\n    currentUser,\r\n    login,\r\n    logout,\r\n    isAdmin\r\n  }), [currentUser]); // Recalculate only when currentUser changes\r\n\r\n  useEffect(() => {\r\n    // Clean up localStorage if currentUser is null (optional)\r\n    if (!currentUser) {\r\n      localStorage.removeItem('currentUser');\r\n    }\r\n  }, [currentUser]);\r\n\r\n  return (\r\n    <AuthContext.Provider value={contextValue}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use the AuthContext\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,SAAS,QAAQ,OAAO;;AAEtF;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,gBAAGP,aAAa,CAAC,CAAC;;AAEnC;AACA,OAAO,MAAMQ,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C;EACA,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,MAAM;IACnD,MAAMW,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC;IAC5D,OAAOJ,IAAI,IAAI,IAAI,CAAC,CAAC;EACvB,CAAC,CAAC;;EAEF;EACA,MAAMK,KAAK,GAAIL,IAAI,IAAK;IACtBG,YAAY,CAACG,OAAO,CAAC,aAAa,EAAEL,IAAI,CAACM,SAAS,CAACP,IAAI,CAAC,CAAC,CAAC,CAAC;IAC3DD,cAAc,CAACC,IAAI,CAAC,CAAC,CAAC;EACxB,CAAC;;EAED;EACA,MAAMQ,MAAM,GAAGA,CAAA,KAAM;IACnBL,YAAY,CAACM,UAAU,CAAC,aAAa,CAAC,CAAC,CAAC;IACxCV,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;EACxB,CAAC;;EAED;EACA,MAAMW,OAAO,GAAGZ,WAAW,IAAIA,WAAW,CAACa,IAAI,KAAK,OAAO;;EAE3D;EACA,MAAMC,YAAY,GAAGtB,OAAO,CAAC,OAAO;IAClCQ,WAAW;IACXO,KAAK;IACLG,MAAM;IACNE;EACF,CAAC,CAAC,EAAE,CAACZ,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEpBP,SAAS,CAAC,MAAM;IACd;IACA,IAAI,CAACO,WAAW,EAAE;MAChBK,YAAY,CAACM,UAAU,CAAC,aAAa,CAAC;IACxC;EACF,CAAC,EAAE,CAACX,WAAW,CAAC,CAAC;EAEjB,oBACEL,OAAA,CAACC,WAAW,CAACmB,QAAQ;IAACC,KAAK,EAAEF,YAAa;IAAAhB,QAAA,EACvCA;EAAQ;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;;AAED;AAAArB,EAAA,CA5CaF,YAAY;AAAAwB,EAAA,GAAZxB,YAAY;AA6CzB,OAAO,MAAMyB,OAAO,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC3B,OAAOjC,UAAU,CAACM,WAAW,CAAC;AAChC,CAAC;AAAC2B,GAAA,CAFWD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}